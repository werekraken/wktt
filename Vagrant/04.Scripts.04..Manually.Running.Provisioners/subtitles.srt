1
00:00:00,840 --> 00:00:02,150
Let's bring up
our machine.

2
00:00:05,270 --> 00:00:07,030
One of vagrant's
strongest features

3
00:00:07,031 --> 00:00:10,030
is that it provides a clean,
well-known starting environment.

4
00:00:12,000 --> 00:00:15,900
As we've seen, provisioners can be used
to enhance these initial environments

5
00:00:15,901 --> 00:00:18,060
by formalizing customizations.

6
00:00:19,660 --> 00:00:23,690
However, some environments are
complex to setup from scratch;

7
00:00:23,691 --> 00:00:27,060
some changes require many
incremental builds or tests.

8
00:00:27,660 --> 00:00:31,420
We want vagrant to assist our work--
not make it slow or tedious.

9
00:00:33,000 --> 00:00:35,930
Therefore, there are times
when it becomes advantageous

10
00:00:35,931 --> 00:00:38,660
to manually run
or rerun provisioners.

11
00:00:40,750 --> 00:00:43,090
`vagrant provision`
meets our needs here.

12
00:00:44,030 --> 00:00:48,600
We can see that our provisioner just ran
and asked yum to install git once again.

13
00:00:49,720 --> 00:00:52,480
It's already installed,
so yum has nothing to do.

14
00:00:54,510 --> 00:00:59,270
`vagrant provision` can be a real time-saver
when developing provisioners themselves--

15
00:00:59,271 --> 00:01:03,750
especially substantial ones which usually
require many incremental tests.

16
00:01:05,570 --> 00:01:08,000
Structuring provisioners
such that they reset

17
00:01:08,001 --> 00:01:11,270
each key part of a complex environment,
to a known state,

18
00:01:11,271 --> 00:01:14,360
can avoid the need
to repeat slow initial setups.

19
00:01:15,540 --> 00:01:18,180
A declarative configuration tool
like puppet

20
00:01:18,181 --> 00:01:20,750
might have an advantage
over shell provisioners here.

21
00:01:22,750 --> 00:01:26,330
Another option is to provide
the formalization in another layer.

22
00:01:27,570 --> 00:01:32,030
I constantly use mock to build rpms
from inside a vagrant environment.

23
00:01:33,120 --> 00:01:35,810
I've also run docker inside
a vagrant managed machine

24
00:01:35,811 --> 00:01:38,120
to provide structure
to certain tasks.

25
00:01:39,750 --> 00:01:43,390
An optimal solution all depends
on the particulars of the use-case.

26
00:01:44,120 --> 00:01:45,210
Let's clean up.
