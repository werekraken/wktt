1
00:00:01,510 --> 00:00:04,540
Here we have our new install
of Vagrant Manager:

2
00:00:04,541 --> 00:00:08,510
a GUI tool providing centralized management
of vagrant machines.

3
00:00:10,090 --> 00:00:14,390
Vagrant Manager is only available
on macOS and Windows at present.

4
00:00:15,210 --> 00:00:19,420
So, we're back on our
macOS 12.6.3 baremetal environment.

5
00:00:22,000 --> 00:00:25,570
I've copied our demo project
over from my Ubuntu environment.

6
00:00:27,240 --> 00:00:31,270
And I've installed vagrant-vbguest
in my macOS environment.

7
00:00:33,330 --> 00:00:38,030
Finally, I created and destroyed this
vagrant managed machine a few minutes ago.

8
00:00:39,360 --> 00:00:43,060
This ensures that the one time
events and operations we've already seen,

9
00:00:43,061 --> 00:00:45,450
like box download,
have been triggered.

10
00:00:47,900 --> 00:00:52,120
At this point, my macOS vagrant setup
should be in the same essential state

11
00:00:52,121 --> 00:00:55,510
as my Ubuntu vagrant setup was
when we last saw it.

12
00:00:57,270 --> 00:00:59,270
Let's open Vagrant Manager.

13
00:01:03,510 --> 00:01:05,870
Currently, it doesn't
show any machines.

14
00:01:06,960 --> 00:01:11,090
Let's refresh--
still nothing.

15
00:01:12,510 --> 00:01:16,420
This is an important take away:
without additional configuration,

16
00:01:16,421 --> 00:01:20,180
Vagrant Manager ignores machines
in the "not created" state.

17
00:01:21,120 --> 00:01:22,510
Let's bring up
our machine.

18
00:01:40,960 --> 00:01:42,390
Time to refresh again.

19
00:01:46,300 --> 00:01:50,060
Now we can see a menu entry
for our project in Vagrant Manager.

20
00:01:51,450 --> 00:01:55,120
Hover over the entry
and a menu of options will be presented.

21
00:01:57,420 --> 00:02:01,660
With a single click on "SSH",
Vagrant Manager will open a terminal,

22
00:02:01,661 --> 00:02:05,390
change to the project directory,
and run `vagrant ssh`.

23
00:02:05,960 --> 00:02:08,390
One click and we're
logged in to our vm.

24
00:02:10,780 --> 00:02:14,300
By selecting "Open in Terminal",
Vagrant Manager will open a terminal

25
00:02:14,301 --> 00:02:18,690
and change to the project directory--
no automated `vagrant ssh` this time.

26
00:02:19,420 --> 00:02:21,750
However, you'll land
in the project directory

27
00:02:21,751 --> 00:02:25,750
with the full command line,
including `vagrant ssh`, at your disposal.

28
00:02:27,630 --> 00:02:30,690
Let's select "SSH"
to login to our machine.

29
00:02:32,840 --> 00:02:37,150
Now we have a new terminal window sitting
at the prompt of our internal environment.

30
00:02:38,150 --> 00:02:41,570
We can run any commands available
in our vm like normal.

31
00:02:43,480 --> 00:02:45,210
When ready,
we can log out.

32
00:02:45,480 --> 00:02:48,300
And we end up at the prompt
of our external environment.

33
00:02:49,420 --> 00:02:53,270
This is the same place where "Open
in Terminal" would have taken us directly.

34
00:02:55,030 --> 00:02:59,000
Here we can run any commands available
to our baremetal environment like normal.

35
00:02:59,390 --> 00:03:01,960
Surprise, surprise,
our machine is running.

36
00:03:03,930 --> 00:03:07,570
Close out of the terminal window
using standard methods when ready.

37
00:03:09,660 --> 00:03:11,180
As we saw a moment ago,

38
00:03:11,181 --> 00:03:14,660
Vagrant Manager won't present machines
in the "not created" state.

39
00:03:16,150 --> 00:03:19,600
If we destroy this machine,
it will be removed from the menu.

40
00:03:22,000 --> 00:03:26,780
If you want specific machines present
in Vagrant Manager even when "not created",

41
00:03:26,781 --> 00:03:28,210
you can bookmark them.

42
00:03:29,660 --> 00:03:31,660
Let's do so
for demo now.

43
00:03:39,180 --> 00:03:41,420
And then destroy
from Vagrant Manager.

44
00:03:42,720 --> 00:03:45,480
Click confirm to move forward
with the destruction.

45
00:03:47,570 --> 00:03:51,240
A task window opens
and runs `vagrant destroy` on our behalf.

46
00:03:52,960 --> 00:03:54,300
Let's close
out of that.

47
00:03:58,000 --> 00:04:00,750
We can see that Vagrant Manager
has an entry for demo

48
00:04:00,751 --> 00:04:03,450
despite the fact that
it's in the "not created" state.

49
00:04:05,450 --> 00:04:08,330
Now we can bring up our machine
using Vagrant Manager.

50
00:04:10,450 --> 00:04:13,660
A task window opens
and runs `vagrant up` for us.

51
00:04:16,300 --> 00:04:20,600
Vagrant Manager exposes many
useful vagrant actions in clickable form.

52
00:04:21,900 --> 00:04:24,600
If you're most comfortable
using a GUI environment,

53
00:04:24,601 --> 00:04:28,000
this tool may become a significant part
of your vagrant workflow.

54
00:04:30,300 --> 00:04:35,060
My main use case for Vagrant Manager
is to quickly locate abandoned vms.

55
00:04:36,450 --> 00:04:40,660
When priorities shift suddenly,
it's all too easy to leave machines behind,

56
00:04:40,661 --> 00:04:43,420
needlessly consuming
finite resources.

57
00:04:44,480 --> 00:04:48,240
For me, Vagrant Manager simplifies
reclaiming cpu, memory,

58
00:04:48,241 --> 00:04:52,450
and storage resources currently tied up
by discarded vagrant machines.

59
00:04:53,750 --> 00:04:54,630
Let's clean up.
