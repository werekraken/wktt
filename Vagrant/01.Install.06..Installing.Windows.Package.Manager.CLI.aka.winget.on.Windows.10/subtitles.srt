1
00:00:02,150 --> 00:00:03,360
Here we have Windows 10

2
00:00:03,361 --> 00:00:06,090
with the PSWindowsUpdate
PowerShell module installed.

3
00:00:07,720 --> 00:00:10,540
Our first step is to ensure
that the environment is up-to-date.

4
00:00:12,300 --> 00:00:14,000
The basic environment is.

5
00:00:15,420 --> 00:00:19,180
If updates are needed, they can
be installed with a few extra flags.

6
00:00:20,540 --> 00:00:24,840
Be sure to only use the `-AutoReboot` flag
if now is a suitable time for a reboot.

7
00:00:26,750 --> 00:00:29,660
Now, let's install winget
and a few dependencies.

8
00:00:31,180 --> 00:00:34,360
Without a package manager,
we'll have to install them manually.

9
00:00:36,150 --> 00:00:39,060
The process for each package
will look quite similar--

10
00:00:39,061 --> 00:00:42,810
we'll download one or more assets,
extract as needed,

11
00:00:42,811 --> 00:00:46,360
validate what we're about to install,
and then install it.

12
00:00:48,030 --> 00:00:51,780
First up is
the Windows UI Library, UI Xaml.

13
00:00:53,390 --> 00:00:56,450
Let's download the nuget
linked in the project's README.

14
00:00:57,840 --> 00:01:02,000
We don't have .NET installed, but--
like many package formats--

15
00:01:02,001 --> 00:01:03,720
a .nupkg is really just an archive.

16
00:01:06,060 --> 00:01:08,510
We'll name our download
with the .zip extension

17
00:01:08,511 --> 00:01:11,060
since some Windows tools
are picky about those.

18
00:01:16,120 --> 00:01:18,750
Extract the .zip
to get at the .appx file.

19
00:01:20,180 --> 00:01:23,870
Let's validate the embedded
digital signature in the .appx.

20
00:01:26,210 --> 00:01:26,900
Looks good.

21
00:01:28,000 --> 00:01:29,060
Let's install that.

22
00:01:34,750 --> 00:01:38,330
Next, we need
the Visual C++ Runtime libraries.

23
00:01:38,570 --> 00:01:40,420
Let's download the .appx linked

24
00:01:40,421 --> 00:01:43,150
in the Visual Studio
troubleshooting documentation.

25
00:01:52,390 --> 00:01:54,480
Validate the digital signature.

26
00:01:57,240 --> 00:01:59,360
Good to go.
And install.

27
00:02:03,300 --> 00:02:06,000
With the dependencies installed,
we can now install

28
00:02:06,001 --> 00:02:09,540
the Windows Package Manager CLI,
also known as winget.

29
00:02:11,210 --> 00:02:15,300
Let's download the .msixbundle
from the project's github releases.

30
00:02:28,210 --> 00:02:29,540
This project also provides

31
00:02:29,541 --> 00:02:35,060
a SHA-256 of the .msixbundle
in the correspondingly named .txt file.

32
00:02:36,810 --> 00:02:39,450
Let's compare the SHA
contained in the .txt file

33
00:02:39,451 --> 00:02:41,570
to our downloaded .msixbundle.

34
00:02:43,060 --> 00:02:47,660
For basic validation of an asset securely
downloaded from a trusted domain--

35
00:02:47,661 --> 00:02:51,480
such as this--I'm comfortable
with a simple visual comparison.

36
00:02:52,570 --> 00:02:56,240
I generally compare
the first and last 4-6 characters,

37
00:02:56,241 --> 00:02:58,600
then check one or two random spots
in the middle.

38
00:02:59,480 --> 00:03:02,360
Compare the hashes programmatically
as you see fit.

39
00:03:03,210 --> 00:03:04,750
This download looks good to me.

40
00:03:05,690 --> 00:03:07,000
Time to install.

41
00:03:11,450 --> 00:03:13,060
Let's check our installation.

42
00:03:14,090 --> 00:03:15,060
Looks good.
